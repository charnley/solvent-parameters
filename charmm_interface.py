#!/usr/bin/env python2

from os import getcwd, chdir, mkdir, system, popen
import sys

import numpy as np

CHARMM_EXE = "/home/andersx/dev/c41a1_dev/exec/em64t/charmm"
SLKO_DIR = "/home/andersx/parameters/3ob-3-1"
ATOMS = ("H", "C", "N", "O", "F", "P", "S", "Cl", "Br")

HUBBARD = dict()
HUBBARD["H"]  = -0.1857
HUBBARD["C"]  = -0.1492
HUBBARD["N"]  = -0.1535
HUBBARD["O"]  = -0.1575
HUBBARD["F"]  = -0.1623
HUBBARD["P"]  = -0.1400
HUBBARD["S"]  = -0.1100
HUBBARD["Cl"] = -0.0697
HUBBARD["Br"] = -0.0573

ZETA = 4.00

def generate_atom_dict():

    atom_dict = dict()

    for atom in ATOMS:
        atom_dict[atom] = 0

    return atom_dict



def run_dftb_pb(ixyz, charge, parameters):


    RADII = dict()
    RADII["H"]  = parameters[0] #! H
    RADII["C"]  = parameters[1] #! C
    RADII["N"]  = parameters[2] #! N
    RADII["O"]  = parameters[3] #! O
    RADII["F"]  = parameters[4] #! F
    RADII["P"]  = parameters[5] #! P
    RADII["S"]  = parameters[6] #! S
    RADII["Cl"] = parameters[7] #! Cl
    RADII["Br"] = parameters[8] #! Br
    
    CHDR = dict()
    CHDR["H"]   = parameters[9] #! H
    CHDR["C"]   = parameters[10] #! C
    CHDR["N"]   = parameters[11] #! N
    CHDR["O"]   = parameters[12] #! O
    CHDR["F"]   = parameters[13] #! F
    CHDR["P"]   = parameters[14] #! P
    CHDR["S"]   = parameters[15] #! S
    CHDR["Cl"]  = parameters[16] #! Cl
    CHDR["Br"]  = parameters[17] #! Br
    
    STEN = parameters[18]

    ixyz = sys.argv[1] 
    charge = float(sys.argv[2])

    scr_dir= ixyz[:-4]
    
    try:
        mkdir(scr_dir)
    except:
        pass

    # Create CRD file

    crd_file = scr_dir + "/molecule.crd"

    f = open(ixyz, "r")
    ixyz_lines = f.readlines()
    f.close()

    atom_count = generate_atom_dict()

    total_atoms_count = int(ixyz_lines[0])

    crd_output  = "*  Molecule input for CHARMM\n"
    crd_output += "*  Generated by Anders Christensen // PPQM 2017\n"
    crd_output += "*\n""" 
    crd_output += "%5i" % (total_atoms_count) 

    for i, line in enumerate(ixyz_lines[2:]):

        tokens = line.split()

        if len(tokens) < 4:
            break

        atom_type = tokens[0]
        x = float(tokens[1])
        y = float(tokens[2])
        z = float(tokens[3])

        atom_count[atom_type] += 1

        atom_spec = "%s%i" % (atom_type, atom_count[atom_type])
        if len(atom_spec) < 3:
            atom_spec += " "
        if len(atom_spec) < 4:
            atom_spec += " "

        crd_string = "\n %4i    1 DFTB %4s %9.5f %9.5f %9.5f DFTB 1      0.00000" % (i + 1,atom_spec, x, y, z)

        crd_output += crd_string

    f = open(crd_file, "w")
    for line in crd_output:
        f.write(line)
    f.close()


    # create molecule.rtf

    rtf_file = scr_dir + "/molecule.rtf"
    
    rtf_output = "31  1\n"
    rtf_output += "\n"
    rtf_output += "MASS     1 H      1.00800 H ! polar H\n"
    rtf_output += "MASS     2 C     12.01100 C ! carbonyl C, peptide backbone\n"
    rtf_output += "MASS     3 N     14.00700 N ! proline N\n"
    rtf_output += "MASS     4 O     15.99900 O ! carbonyl oxygen\n"
    rtf_output += "MASS     5 F     18.99800 F ! carbonyl oxygen\n"
    rtf_output += "MASS     6 P     30.97379 P ! phosphorous\n"
    rtf_output += "MASS     7 S     32.06000 S ! sulphur\n"
    rtf_output += "MASS     8 Cl    35.45000 Cl ! sulphur\n"
    rtf_output += "MASS     9 Br    79.90400 Br ! sulphur\n"
    rtf_output += "\n"
    rtf_output += "DEFA FIRS NONE LAST NONE\n"
    rtf_output += "AUTO ANGLES DIHE\n"
    rtf_output += "\n"
    rtf_output += "RESI DFTB        0.00\n"
    rtf_output += "GROUP\n"

    atom_count = generate_atom_dict()

    total_atoms_count = int(ixyz_lines[0])

    for i, line in enumerate(ixyz_lines[2:]):

        tokens = line.split()

        if len(tokens) < 4:
            break

        atom_type = tokens[0]
        x = float(tokens[1])
        y = float(tokens[2])
        z = float(tokens[3])

        atom_count[atom_type] += 1

        if len(atom_type) == 1:
            rtf_output += "ATOM %1s%-3i  %1s     0.00\n" % (atom_type, atom_count[atom_type], atom_type)
        elif len(atom_type) == 2:
            rtf_output += "ATOM %2s%-3i %2s    0.00\n" % (atom_type, atom_count[atom_type], atom_type)

        else:
            print "ERROR: Atom type longer than two chars."
            exit()

    rtf_output += "\n"
    rtf_output += "END"

    f = open(rtf_file, "w")
    for line in rtf_output:
        f.write(line)
    f.close()

    inp_output  = "* DFTB input for CHARMM\n"
    inp_output += "*\n"
    inp_output += "\n"
    inp_output += "bomb -5\n"
    inp_output += "wrnlev -5\n"
    inp_output += "\n"
    inp_output += "open read card unit 10 name molecule.rtf\n"
    inp_output += "read rtf card unit 10\n"
    inp_output += "close unit 10\n"
    inp_output += "\n"
    inp_output += "read sequence dftb 1\n"
    inp_output += "generate dftb setup noangle nodihedral\n"
    inp_output += "\n"
    inp_output += "open read unit 10 card name molecule.crd\n"
    inp_output += "read coor unit 10 card append\n"
    inp_output += "close unit 10\n"
    inp_output += "\n"
    inp_output += "define qm sele all end\n"
    inp_output += "\n"

    i = 0
    for atom in ATOMS:
        n = atom_count[atom]
        if n == 0:
            continue
        i += 1
        inp_output += "scalar wmain set %i.0 sele (qm) .and. type %s*  end\n" % (i, atom)

    inp_output += "\n"

    inp_output += "SCCDftb remove CHRG %f sele qm end TEMP 0.00 mixe 1 -\n" % float(charge)
    inp_output += "     dmet 2 dmkl 0 d3rd hbon noqprint scfc scftol 1e-10\n"

    #inp_output += "energy\n"
    #inp_output += "\n"
    #inp_output += "stop\n"
    inp_output += "\n"
    inp_output += "set factor 0.952\n"
    inp_output += "set sw     0.3\n"
    inp_output += "\n"
    inp_output += "scalar wmain = radius\n"
    inp_output += "! SMD radii - NOT used for charge-dependent runs (chdr key)\n"
    inp_output += "scalar wmain set     1.2000  sele type  H*          end \n"
    inp_output += "scalar wmain set     1.8500  sele type  C*          end \n"
    inp_output += "scalar wmain set     1.8900  sele type  N*          end \n"
    inp_output += "scalar wmain set     1.5200  sele type  O*          end \n"
    inp_output += "scalar wmain set     1.7300  sele type  F*          end \n"
    inp_output += "scalar wmain set     2.1200  sele type  P*          end \n"
    inp_output += "scalar wmain set     2.4900  sele type  S*          end \n"
    inp_output += "scalar wmain set     2.3800  sele type  Cl*         end \n"
    inp_output += "scalar wmain set     3.0600  sele type  Br*         end \n"
    inp_output += "scalar wmain add  @sw\n"
    inp_output += "scalar wmain mult @factor\n"
    inp_output += "scalar wmain set 0.0 sele type H* end\n"
    inp_output += "scalar wmain stat select .not. type H* end\n"
    inp_output += "define check select (.not. type H*) .and. (prop wmain .eq. 0.0) show end\n"
    inp_output += "if ?nsel ne 0  stop\n"
    inp_output += "coor orient\n"
    inp_output += "\n"
    inp_output += "!Solvation Free Energy\n"
    inp_output += "PBEQ\n"
    inp_output += "\n"
    inp_output += "   OPEN UNIT 21 name chrg_radius_scc.dat READ FORM\n"
    inp_output += "   SOLVE bspl epsw 80.0 epsp 1.0 nclx 81 ncly 81 nclz 81 -\n"
    inp_output += "   dcel 0.20  maxi 20000 conc 0.0 temp 300.00  -\n"
    inp_output += "   pstl  0.001 urad 21 IGAS -\n"
    inp_output += "   force smooth swin @sw npbe 1 sten %f -\n" % STEN
    inp_output += "   chdr !activate charge-dependence of atomic radii\n"
    inp_output += "\n"
    inp_output += "END\n"
    inp_output += "\n"
    inp_output += "PBEQ\n"
    inp_output += "\n"
    inp_output += "\n"
    inp_output += "STOP\n"

    inp_file = scr_dir + "/calculation.inp"

    
    f = open(inp_file, "w")
    for line in inp_output:
        f.write(line)
    f.close()


    # write sccdftb.dat file

    dat_file = scr_dir + "/sccdftb.dat"

    dat_output = ""
    for atom1 in ATOMS:
        for atom2 in ATOMS:
            if atom_count[atom1] > 0 and atom_count[atom2] > 0:

                dat_output += "'%s/%s-%s.skf'\n" % (SLKO_DIR, atom1, atom2)

    for atom in ATOMS:
        if atom_count[atom] > 0:
            dat_output += "'%s' %s\n" % (atom.lower(), HUBBARD[atom])

    dat_output += str(ZETA)

    f = open(dat_file, "w")
    for line in dat_output:
        f.write(line)
    f.close()

    # Write chrgatdat

    chrg = "%i 1\n" % i
    for atom in ATOMS:
        if atom_count[atom] > 0:
            chrg += "%f %f\n" % (CHDR[atom], RADII[atom])


    f = open(scr_dir + "/chrg_radius_scc.dat", "w")
    for line in chrg:
        f.write(line)
    f.close()


    chdir(scr_dir)
    command = CHARMM_EXE + " < calculation.inp"
    
    E_solv_np = 0.0
    E_solv_qm = 0.0
    E_solv_tot = 0.0

    lines = popen(command)

    for line in lines:

        if "The Nonpolar Solvation Free Energy" in line:
            E_solv_np = float(line.split()[6])

        if "The Quantum Mechanical Solvation Energy" in line:
            E_solv_qm = float(line.split()[6])

        if "The Total Solvation Energy" in line:
            E_solv_tot = float(line.split()[5])

    return E_solv_tot

if __name__ == "__main__":

    parameters = np.zeros((19))

    # Netural Radii
    parameters[0]  = 1.47 # RADII["H"]  = 1.47
    parameters[1]  = 1.85 # RADII["C"]  = 1.85
    parameters[2]  = 1.94 # RADII["N"]  = 1.94
    parameters[3]  = 1.70 # RADII["O"]  = 1.70
    parameters[4]  = 2.03 # RADII["F"]  = 2.03
    parameters[5]  = 2.12 # RADII["P"]  = 2.12
    parameters[6]  = 2.49 # RADII["S"]  = 2.49
    parameters[7]  = 2.38 # RADII["Cl"] = 2.38
    parameters[8]  = 3.06 # RADII["Br"] = 3.06

    # Radius Charge Dependence
    parameters[9]  = -0.11 # CHDR["H"]  = -0.11
    parameters[10] = -0.24 # CHDR["C"]  = -0.24
    parameters[11] = -0.01 # CHDR["N"]  = -0.01
    parameters[12] = -0.11 # CHDR["O"]  = -0.11
    parameters[13] = -0.05 # CHDR["F"]  = -0.05
    parameters[14] = -0.05 # CHDR["P"]  = -0.05
    parameters[15] = -0.05 # CHDR["S"]  = -0.05
    parameters[16] = -0.05 # CHDR["Cl"] = -0.05
    parameters[17] = -0.05 # CHDR["Br"] = -0.05

    # Surface tension for Non-Polar Term
    parameters[18] = 0.005 # STEN = 0.005

    E_solv = run_dftb_pb(sys.argv[1], int(sys.argv[2]), parameters)
    print E_solv
